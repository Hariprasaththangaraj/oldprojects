package com.server.main.user.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import com.server.main.user.DAORepository.StudentRepo;
import com.server.main.user.StudentRequestModel.studentDetailsRequest;
import com.server.main.user.StudentResponseModel.Address;
import com.server.main.user.StudentResponseModel.StudentDetails;

@Service
public class StudentService {

	@Autowired
	public StudentRepo studentRepo;

	public StudentDetails savestudentdetails(studentDetailsRequest StudentRequest) {

		/*
		 * StudentDetails studentDetails = new StudentDetails();
		 * studentDetails.setStudentName(StudentRequest.getStudentName());
		 * studentDetails.setGender(StudentRequest.getGender());
		 * studentDetails.setAddress(StudentRequest.getAddress()); //
		 * studentDetails.setSchoolName(StudentRequest.getSchoolName());
		 * studentDetails.setStandard(StudentRequest.getStandard());
		 * studentDetails.setActive(StudentRequest.isActive()); StudentDetails
		 * savedStudentDetails = studentRepo.save(studentDetails);
		 */

		StudentDetails studentDetails = StudentDetails.builder().studentName(StudentRequest.getStudentName()).gender(StudentRequest.getGender())
				.address(StudentRequest.getAddress()).standard(StudentRequest.getStandard())
				.active(StudentRequest.isActive()).build();
		
		StudentDetails savedStudentDetails = studentRepo.save(studentDetails);

		return savedStudentDetails;

	}

	public StudentDetails updateteamdetails(studentDetailsRequest StudentRequest, Integer getId) throws Exception {

		Optional<StudentDetails> studentDetails = studentRepo.findById(getId);
		if (!studentDetails.isPresent()) {
			throw new Exception("Student ID not found");
		}

		StudentDetails studentDetail = studentDetails.get();

		studentDetail.setStudentName(StudentRequest.getStudentName());
		studentDetail.setGender(StudentRequest.getGender());
		// studentDetail.setSchoolName(StudentRequest.getSchoolName());
		studentDetail.setStandard(StudentRequest.getStandard());
		studentDetail.setActive(StudentRequest.isActive());

		Address studentAddress = studentDetail.getAddress();
		studentAddress.setCityName(StudentRequest.getAddress().getCityName());
		studentAddress.setDoorNo(StudentRequest.getAddress().getDoorNo());
		studentAddress.setPhoneNumber(StudentRequest.getAddress().getPhoneNumber());
		studentAddress.setStateName(StudentRequest.getAddress().getStateName());
		studentAddress.setStreetName(StudentRequest.getAddress().getStreetName());

		studentDetail.setAddress(studentAddress);

		StudentDetails updatedStudentDetails = studentRepo.save(studentDetail);

		return updatedStudentDetails;

	}

	public List<StudentDetails> getStudentdetails(Integer getid) {
		List<StudentDetails> filteredStudentDetails = studentRepo.findByStudentIdAndActive(getid, Boolean.TRUE);
		if (CollectionUtils.isEmpty(filteredStudentDetails)) {
			throw new RuntimeException("No such data found");
		}
		return filteredStudentDetails;
	}

}
