package com.server.main.user.service;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.server.main.user.DAORepository.StudentRepo;
import com.server.main.user.StudentRequestModel.studentDetailsRequest;
import com.server.main.user.StudentResponseModel.AcademicId;
import com.server.main.user.StudentResponseModel.AddressID;
import com.server.main.user.StudentResponseModel.StudentDetails;
import com.server.main.user.StudentResponseModel.SubjectId;

@Service
public class StudentService {

	@Autowired
	public StudentRepo studentRepo;

	public StudentDetails savestudentdetails(studentDetailsRequest studentdetailsRequest) {

		StudentDetails studentDetails = StudentDetails.builder().studentName(studentdetailsRequest.getStudentName())
				.gender(studentdetailsRequest.getGender()).schoolName(studentdetailsRequest.getSchoolName())
				.addressID(studentdetailsRequest.getAddressID()).academicid(studentdetailsRequest.getAcademicid())
				.boardId(studentdetailsRequest.getBoardId()).active(studentdetailsRequest.getActive()).build();

		return studentRepo.save(studentDetails);

	}

	public StudentDetails updateteamdetails(studentDetailsRequest studentdetailsRequest, Integer getId)
			throws Exception {

		StudentDetails findStudentId = studentDetailsInDatabase(studentdetailsRequest, getId);

		return studentRepo.save(findStudentId);

	}

	public void deleteStudentdetails(Integer getId) {
		
		Optional<StudentDetails> studentIdDetails = studentRepo.findById(getId);

		StudentDetails studentIsdetail = studentIdDetails.get();

		if (studentIsdetail.getActive() == false) {
			throw new RuntimeException("Student Status is Already inActive!!!");
		}

		studentIsdetail.setActive(false);
		studentRepo.save(studentIsdetail);
	}

	public StudentDetails studentDetailsInDatabase(studentDetailsRequest studentdetailsRequest, Integer getId) {

		StudentDetails studentDetails = checkStudentDatabase(getId);

		studentDetails.setStudentName(studentdetailsRequest.getStudentName());
		studentDetails.setGender(studentdetailsRequest.getGender());
		studentDetails.setSchoolName(studentdetailsRequest.getSchoolName());
		studentDetails.setActive(studentdetailsRequest.getActive());
		studentDetails.setBoardId(studentdetailsRequest.getBoardId());

		AddressID studentAddress = studentDetails.getAddressID();
		studentAddress.setCity(studentdetailsRequest.getAddressID().getCity());
		studentAddress.setDoorNo(studentdetailsRequest.getAddressID().getDoorNo());
		studentAddress.setState(studentdetailsRequest.getAddressID().getState());
		studentAddress.setStreet(studentdetailsRequest.getAddressID().getStreet());

		studentDetails.setAddressID(studentAddress);

		AcademicId studentAcadamicDetails = studentDetails.getAcademicid();
		studentAcadamicDetails.setAcadamicYear(studentdetailsRequest.getAcademicid().getAcadamicYear());
		studentAcadamicDetails.setMedium(studentdetailsRequest.getAcademicid().getMedium());
		studentAcadamicDetails.setStandard(studentdetailsRequest.getAcademicid().getStandard());
		studentAcadamicDetails.setTerm(studentdetailsRequest.getAcademicid().getTerm());

		SubjectId studentSubjectDetails = studentDetails.getAcademicid().getSubjectId();
		studentSubjectDetails.setEnglish(studentdetailsRequest.getAcademicid().getSubjectId().getEnglish());
		studentSubjectDetails.setTamil(studentdetailsRequest.getAcademicid().getSubjectId().getTamil());
		studentSubjectDetails.setTotal(studentdetailsRequest.getAcademicid().getSubjectId().getTotal());
		studentAcadamicDetails.setSubjectId(studentSubjectDetails);

		studentDetails.setAcademicid(studentAcadamicDetails);

		return studentDetails;
	}

	public StudentDetails checkStudentDatabase(Integer getID) {

		Optional<StudentDetails> studentDBreturn = studentRepo.findById(getID);

		if (studentDBreturn.isPresent() == false) {
			throw new RuntimeException("Data not found!!!");
		}

		return studentDBreturn.get();
	}

	public StudentDetails checkStudentDatabaseByID(Integer GetId) {

		Optional<StudentDetails> studentDetails = studentRepo.findById(GetId);
		StudentDetails studentdetailsDB = studentDetails.get();

		if (!studentdetailsDB.getActive() || !studentDetails.isPresent()) {
			throw new RuntimeException("STUDENT ACTIVE STATUS IS FALSE!!!");
		} else
			return studentdetailsDB;
	}

	public StudentDetails checkStudentDatabaseByIdYearTerm(Integer GetId, Integer year, String term) {

		Optional<StudentDetails> studentDetails = studentRepo.findById(GetId);
		StudentDetails studentdetailsDB = studentDetails.get();

		if (!studentdetailsDB.getActive() || studentdetailsDB.getAcademicid().getAcadamicYear().isBlank()) {
			throw new RuntimeException("STUDENT ACTIVE STATUS IS FALSE!!!");
		} else
			return studentdetailsDB;
	}
}
